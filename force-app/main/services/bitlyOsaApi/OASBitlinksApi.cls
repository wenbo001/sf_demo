/*
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASBitlinksApi {
    BitlyApiClient client;

    public OASBitlinksApi(BitlyApiClient client) {
        this.client = client;
    }

    public OASBitlinksApi() {
        this.client = new BitlyApiClient();
    }

    public BitlyApiClient getClient() {
        return this.client;
    }

    /**
     * Shorten a Link
     * Converts a long url to a Bitlink. You may see errors returned from this endpoint - &quot;BRANDED_LINK_MONTHLY_LIMIT_EXCEEDED&quot; occurs if you have shortened more links than your account is configured for for the month, and &quot;DNS_CONFIGURATION_ERROR&quot; occurs if you are attempting to shorten links against a custom domain which doesn\&#39;t have DNS properly configured.
     * @param oaSShorten  (required)
     * @return OASShortenBitlinkBody
     * @throws OAS.ApiException if fails to make API call
     */
    public OASShortenBitlinkBody createBitlink(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSShorten'), 'oaSShorten');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASShortenBitlinkBody) client.invoke(
            'POST', '/v4/shorten',
            (OASShorten) params.get('oaSShorten'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASShortenBitlinkBody.class
        );
    }
    /**
     * Create a QR Code
     * Creates a QR code for existing Bitlink
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param oaSQRCustomizations  (required)
     * @return OASFullQRCode
     * @throws OAS.ApiException if fails to make API call
     */
    public OASFullQRCode createBitlinkQRCode(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        client.assertNotNull(params.get('oaSQRCustomizations'), 'oaSQRCustomizations');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASFullQRCode) client.invoke(
            'POST', '/v4/bitlinks/{bitlink}/qr',
            (OASQRCustomizations) params.get('oaSQRCustomizations'),
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASFullQRCode.class
        );
    }
    /**
     * Create a Bitlink
     * Converts a long url to a Bitlink and sets additional parameters. You may see errors returned from this endpoint - &quot;BRANDED_LINK_MONTHLY_LIMIT_EXCEEDED&quot; occurs if you have shortened more links than your account is configured for for the month, and &quot;DNS_CONFIGURATION_ERROR&quot; occurs if you are attempting to shorten links against a custom domain which doesn\&#39;t have DNS properly configured.
     * @param oaSFullShorten  (required)
     * @return OASBitlinkBody
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBitlinkBody createFullBitlink(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSFullShorten'), 'oaSFullShorten');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBitlinkBody) client.invoke(
            'POST', '/bitlinks',
            (OASFullShorten) params.get('oaSFullShorten'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASBitlinkBody.class
        );
    }
    /**
     * Delete a Bitlink
     * Delete an unedited hash Bitlink.
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @return OASLinkDeletionResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASLinkDeletionResponse deleteBitlink(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASLinkDeletionResponse) client.invoke(
            'DELETE', '/bitlinks/{bitlink}', '',
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASLinkDeletionResponse.class
        );
    }
    /**
     * Expand a Bitlink
     * Returns the short link and long URL for the specified link.
     * @param oaSExpandBitlink  (required)
     * @return OASExpandedBitlink
     * @throws OAS.ApiException if fails to make API call
     */
    public OASExpandedBitlink expandBitlink(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSExpandBitlink'), 'oaSExpandBitlink');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASExpandedBitlink) client.invoke(
            'POST', '/expand',
            (OASExpandBitlink) params.get('oaSExpandBitlink'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASExpandedBitlink.class
        );
    }
    /**
     * Retrieve a Bitlink
     * Returns information for the specified link.
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @return OASBitlinkBody
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBitlinkBody getBitlink(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBitlinkBody) client.invoke(
            'GET', '/bitlinks/{bitlink}', '',
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASBitlinkBody.class
        );
    }
    /**
     * Retrieve a QR Code
     * Retrieves a QR code for a Bitlink.
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param imageFormat Determines the image format of the returned QR code (optional, default to png)
     * @return OASFullQRCode
     * @throws OAS.ApiException if fails to make API call
     */
    public OASFullQRCode getBitlinkQRCode(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('image_format', (String) params.get('imageFormat')));
        System.debug('query::' + query);
        List<OAS.Param> form = new List<OAS.Param>();
        return (OASFullQRCode) client.invoke(
            'GET', '/v4/bitlinks/{bitlink}/qr', '',
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASFullQRCode.class
        );
    }
    /**
     * Retrieve Bitlinks by Group
     * Returns a paginated collection of Bitlinks for a group. The list of custom bitlinks has newest entries first.
     * @param groupGuid A GUID for a Bitly group (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param searchAfter Token used to search next batch of links, only use response from API as input value. (optional)
     * @param query The value that you would like to search (optional)
     * @param createdBefore Timestamp as an integer unix epoch (seconds only) (optional)
     * @param createdAfter Timestamp as an integer unix epoch (seconds only) (optional)
     * @param archived Whether or not to include archived bitlinks (optional, default to off)
     * @param deeplinks Filter to only Bitlinks that contain deeplinks (optional, default to both)
     * @param domainDeeplinks Filter to only Bitlinks that contain deeplinks configured with a custom domain (optional, default to both)
     * @param campaignGuid Filter to return only links for the given campaign GUID, can be provided (optional)
     * @param channelGuid Filter to return only links for the given channel GUID, can be provided, overrides all other parameters (optional)
     * @param customBitlink  (optional, default to both)
     * @param tags Filter by given tags (optional, default to new List<String>())
     * @param launchpadIds Filter by launchpad id (optional, default to new List<String>())
     * @param encodingLogin Filter by the login of the authenticated user that created the Bitlink (optional, default to new List<String>())
     * @return OASBitlinks
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBitlinks getBitlinksByGroup(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('search_after', (String) params.get('searchAfter')));
        query.addAll(client.makeParam('query', (String) params.get('query')));
        query.addAll(client.makeParam('created_before', (Integer) params.get('createdBefore')));
        query.addAll(client.makeParam('created_after', (Integer) params.get('createdAfter')));
        query.addAll(client.makeParam('archived', (String) params.get('archived')));
        query.addAll(client.makeParam('deeplinks', (String) params.get('deeplinks')));
        query.addAll(client.makeParam('domain_deeplinks', (String) params.get('domainDeeplinks')));
        query.addAll(client.makeParam('campaign_guid', (String) params.get('campaignGuid')));
        query.addAll(client.makeParam('channel_guid', (String) params.get('channelGuid')));
        query.addAll(client.makeParam('custom_bitlink', (String) params.get('customBitlink')));
        query.addAll(client.makeParams('tags', (List<String>) params.get('tags')));
        query.addAll(client.makeParams('launchpad_ids', (List<String>) params.get('launchpadIds')));
        query.addAll(client.makeParams('encoding_login', (List<String>) params.get('encodingLogin')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBitlinks) client.invoke(
            'GET', '/groups/{group_guid}/bitlinks', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASBitlinks.class
        );
    }
    /**
     * Get Clicks for a Bitlink
     * Returns the click counts for the specified link in an array based on a date.
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASClicks
     * @throws OAS.ApiException if fails to make API call
     */
    public OASClicks getClicksForBitlink(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASClicks) client.invoke(
            'GET', '/bitlinks/{bitlink}/clicks', '',
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASClicks.class
        );
    }
    /**
     * Get a Clicks Summary for a Bitlink
     * Returns the click counts for the specified link rolled up into a single field.
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASClicksSummary
     * @throws OAS.ApiException if fails to make API call
     */
    public OASClicksSummary getClicksSummaryForBitlink(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASClicksSummary) client.invoke(
            'GET', '/bitlinks/{bitlink}/clicks/summary', '',
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASClicksSummary.class
        );
    }
    /**
     * Get Metrics for a Bitlink by City
     * Returns the city origins of click traffic for the specified link.
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASCityMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCityMetrics getMetricsForBitlinkByCities(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASCityMetrics) client.invoke(
            'GET', '/bitlinks/{bitlink}/cities', '',
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASCityMetrics.class
        );
    }
    /**
     * Get Metrics for a Bitlink by Country
     * Returns the country origins of click traffic for the specified link.
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASClickMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASClickMetrics getMetricsForBitlinkByCountries(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASClickMetrics) client.invoke(
            'GET', '/bitlinks/{bitlink}/countries', '',
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASClickMetrics.class
        );
    }
    /**
     * Get Metrics for a Bitlink by Device Type
     * Returns the device types generating click traffic to the specified link.
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASDeviceMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASDeviceMetrics getMetricsForBitlinkByDevices(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASDeviceMetrics) client.invoke(
            'GET', '/bitlinks/{bitlink}/devices', '',
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASDeviceMetrics.class
        );
    }
    /**
     * Get Metrics for a Bitlink by Referrer Name
     * Returns referrer click counts for the specified link.
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASClickMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASClickMetrics getMetricsForBitlinkByReferrerName(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASClickMetrics) client.invoke(
            'GET', '/bitlinks/{bitlink}/referrer_name', '',
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASClickMetrics.class
        );
    }
    /**
     * Get Metrics for a Bitlink by Referrers
     * Returns referrer click counts for the specified link.
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASClickMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASClickMetrics getMetricsForBitlinkByReferrers(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASClickMetrics) client.invoke(
            'GET', '/bitlinks/{bitlink}/referrers', '',
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASClickMetrics.class
        );
    }
    /**
     * Get Metrics for a Bitlink by Referrers by Domain
     * Returns click metrics grouped by referrers for the specified link.
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASReferrersByDomains
     * @throws OAS.ApiException if fails to make API call
     */
    public OASReferrersByDomains getMetricsForBitlinkByReferrersByDomains(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASReferrersByDomains) client.invoke(
            'GET', '/bitlinks/{bitlink}/referrers_by_domains', '',
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASReferrersByDomains.class
        );
    }
    /**
     * Get Metrics for a Bitlink by Referring Domains
     * Returns the referring domain click counts for the specified link.
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASClickMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASClickMetrics getMetricsForBitlinkByReferringDomains(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASClickMetrics) client.invoke(
            'GET', '/bitlinks/{bitlink}/referring_domains', '',
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASClickMetrics.class
        );
    }
    /**
     * Retrieve Sorted Bitlinks for Group
     * Returns a list of Bitlinks sorted by group. The list of custom bitlinks has newest entries first.
     * @param groupGuid A GUID for a Bitly group (required)
     * @param r_sort The type of sorting that you would like to do (required)
     * @param unit A unit of time (optional)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (optional, default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @return OASSortedLinks
     * @throws OAS.ApiException if fails to make API call
     */
    public OASSortedLinks getSortedBitlinks(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        client.assertNotNull(params.get('r_sort'), 'r_sort');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASSortedLinks) client.invoke(
            'GET', '/groups/{group_guid}/bitlinks/{sort}', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid'),
                'sort' => (String) params.get('r_sort')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASSortedLinks.class
        );
    }
    /**
     * Update a Bitlink
     * Updates fields in the specified link. To redirect the link (i.e. to update the Long URL), use PATCH /v4/custom_bitlinks/{custom_bitlink} (https://dev.bitly.com/api-reference/#updateCustomBitlink)
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param oaSBitlinkUpdateBody  (required)
     * @return OASBitlinkBody
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBitlinkBody updateBitlink(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        client.assertNotNull(params.get('oaSBitlinkUpdateBody'), 'oaSBitlinkUpdateBody');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBitlinkBody) client.invoke(
            'PATCH', '/bitlinks/{bitlink}',
            (OASBitlinkUpdateBody) params.get('oaSBitlinkUpdateBody'),
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASBitlinkBody.class
        );
    }
    /**
     * Update a QR Code
     * Updates an existing QR Code
     * @param bitlink A Bitlink made of the domain and hash (required)
     * @param oaSQRCustomizations  (required)
     * @return OASFullQRCode
     * @throws OAS.ApiException if fails to make API call
     */
    public OASFullQRCode updateBitlinkQRCode(Map<String, Object> params) {
        client.assertNotNull(params.get('bitlink'), 'bitlink');
        client.assertNotNull(params.get('oaSQRCustomizations'), 'oaSQRCustomizations');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASFullQRCode) client.invoke(
            'PATCH', '/bitlinks/{bitlink}/qr',
            (OASQRCustomizations) params.get('oaSQRCustomizations'),
            query, form,
            new Map<String, Object>{
                'bitlink' => (String) params.get('bitlink')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASFullQRCode.class
        );
    }
    /**
     * Bulk update bitlinks
     * Bulk update can add or remove tags or archive up to 100 links at a time; The response includes a list of bitlink ids that were updated.
     * @param groupGuid A GUID for a Bitly group (required)
     * @param oaSBulkUpdateRequest  (required)
     * @return OASBulkUpdate
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBulkUpdate updateBitlinksByGroup(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        client.assertNotNull(params.get('oaSBulkUpdateRequest'), 'oaSBulkUpdateRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBulkUpdate) client.invoke(
            'PATCH', '/groups/{group_guid}/bitlinks',
            (OASBulkUpdateRequest) params.get('oaSBulkUpdateRequest'),
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASBulkUpdate.class
        );
    }
}