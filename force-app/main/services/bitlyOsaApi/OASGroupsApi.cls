/*
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASGroupsApi {
    OASClient client;

    public OASGroupsApi(OASClient client) {
        this.client = client;
    }

    public OASGroupsApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Retrieve a Group
     * Returns details for a group.
     * @param groupGuid A GUID for a Bitly group (required)
     * @return OASGroup
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGroup getGroup(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGroup) client.invoke(
            'GET', '/groups/{group_guid}', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASGroup.class
        );
    }
    /**
     * Get clicks by group
     * get number of clicks on bitlinks in a group
     * @param groupGuid A GUID for a Bitly group (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASGroupClicks
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGroupClicks getGroupClicks(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGroupClicks) client.invoke(
            'GET', '/groups/{group_guid}/clicks', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASGroupClicks.class
        );
    }
    /**
     * Get Click Metrics for a Group by City
     * Returns the geographic origins of click traffic by city for the specified group.
     * @param groupGuid A GUID for a Bitly group (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASCityMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCityMetrics getGroupMetricsByCities(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASCityMetrics) client.invoke(
            'GET', '/groups/{group_guid}/cities', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASCityMetrics.class
        );
    }
    /**
     * Get Click Metrics for a Group by Country
     * Returns the geographic origins of click traffic by country for the specified group.
     * @param groupGuid A GUID for a Bitly group (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASClickMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASClickMetrics getGroupMetricsByCountries(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASClickMetrics) client.invoke(
            'GET', '/groups/{group_guid}/countries', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASClickMetrics.class
        );
    }
    /**
     * Get Click Metrics for a Group by Device Type
     * Returns the device types generating click traffic to the specified group\&#39;s links.
     * @param groupGuid A GUID for a Bitly group (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASDeviceMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASDeviceMetrics getGroupMetricsByDevices(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASDeviceMetrics) client.invoke(
            'GET', '/groups/{group_guid}/devices', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASDeviceMetrics.class
        );
    }
    /**
     * Get Click Metrics for a Group by Referrer
     * Returns metrics by referrer for the specified group\&#39;s links.
     * @param groupGuid A GUID for a Bitly group (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASClickMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASClickMetrics getGroupMetricsByReferrer(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASClickMetrics) client.invoke(
            'GET', '/groups/{group_guid}/referrers', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASClickMetrics.class
        );
    }
    /**
     * Get Click Metrics for a Group by Referring Networks
     * Returns metrics by referring networks for the specified group\&#39;s links.
     * @param groupGuid A GUID for a Bitly group (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASClickMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASClickMetrics getGroupMetricsByReferringNetworks(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASClickMetrics) client.invoke(
            'GET', '/groups/{group_guid}/referring_networks', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASClickMetrics.class
        );
    }
    /**
     * Retrieve Group Preferences
     * Returns preferences for the specified group.
     * @param groupGuid A GUID for a Bitly group (required)
     * @return OASGroupPreferences
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGroupPreferences getGroupPreferences(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGroupPreferences) client.invoke(
            'GET', '/groups/{group_guid}/preferences', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASGroupPreferences.class
        );
    }
    /**
     * Retrieve Group Shorten Counts
     * Returns all the shorten counts for a group.
     * @param groupGuid A GUID for a Bitly group (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASMetrics getGroupShortenCounts(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASMetrics) client.invoke(
            'GET', '/groups/{group_guid}/shorten_counts', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASMetrics.class
        );
    }
    /**
     * Retrieve Tags by Group
     * Returns the tags currently used in the specified group. Maximum 1000.
     * @param groupGuid A GUID for a Bitly group (required)
     * @return OASTags
     * @throws OAS.ApiException if fails to make API call
     */
    public OASTags getGroupTags(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASTags) client.invoke(
            'GET', '/groups/{group_guid}/tags', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASTags.class
        );
    }
    /**
     * Retrieve Groups
     * Returns a list of groups in the organization.
     * @param organizationGuid A GUID for a Bitly organization (optional)
     * @return OASGroups
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGroups getGroups(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('organization_guid', (String) params.get('organizationGuid')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGroups) client.invoke(
            'GET', '/groups', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASGroups.class
        );
    }
    /**
     * Retrieve QR Code Logo Images
     * Retrieves logo images associated with QR codes by group
     * @param groupGuid A GUID for a Bitly group (required)
     * @return OASQRLogoImagesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASQRLogoImagesResponse getQRLogoImagesByGroup(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASQRLogoImagesResponse) client.invoke(
            'GET', '/groups/{group_guid}/qr/images', '',
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASQRLogoImagesResponse.class
        );
    }
    /**
     * Update a Group
     * Updates the details of a group.
     * @param groupGuid A GUID for a Bitly group (required)
     * @param oaSGroupUpdate  (required)
     * @return OASGroup
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGroup updateGroup(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        client.assertNotNull(params.get('oaSGroupUpdate'), 'oaSGroupUpdate');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGroup) client.invoke(
            'PATCH', '/groups/{group_guid}',
            (OASGroupUpdate) params.get('oaSGroupUpdate'),
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASGroup.class
        );
    }
    /**
     * Update Group Preferences
     * Updates preferences for a group.
     * @param groupGuid A GUID for a Bitly group (required)
     * @param oaSGroupPreferences  (required)
     * @return OASGroupPreferences
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGroupPreferences updateGroupPreferences(Map<String, Object> params) {
        client.assertNotNull(params.get('groupGuid'), 'groupGuid');
        client.assertNotNull(params.get('oaSGroupPreferences'), 'oaSGroupPreferences');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGroupPreferences) client.invoke(
            'PATCH', '/groups/{group_guid}/preferences',
            (OASGroupPreferences) params.get('oaSGroupPreferences'),
            query, form,
            new Map<String, Object>{
                'group_guid' => (String) params.get('groupGuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASGroupPreferences.class
        );
    }
}