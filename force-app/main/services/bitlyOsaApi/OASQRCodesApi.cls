/*
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASQRCodesApi {
    OASClient client;

    public OASQRCodesApi(OASClient client) {
        this.client = client;
    }

    public OASQRCodesApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Create a QR Code
     * Create a new QR Code and return its metadata
     * @param oaSPublicCreateQRCodeRequest  (required)
     * @return OASQRCodeMinimal
     * @throws OAS.ApiException if fails to make API call
     */
    public OASQRCodeMinimal createQRCodePublic(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSPublicCreateQRCodeRequest'), 'oaSPublicCreateQRCodeRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASQRCodeMinimal) client.invoke(
            'POST', '/qr-codes',
            (OASPublicCreateQRCodeRequest) params.get('oaSPublicCreateQRCodeRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASQRCodeMinimal.class
        );
    }
    /**
     * Retrieve a QR Code
     * Gets the QR code with a matching id.
     * @param qrcodeId The QR Code ID (required)
     * @return OASQRCodeDetails
     * @throws OAS.ApiException if fails to make API call
     */
    public OASQRCodeDetails getQRCodeByIdPublic(Map<String, Object> params) {
        client.assertNotNull(params.get('qrcodeId'), 'qrcodeId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASQRCodeDetails) client.invoke(
            'GET', '/qr-codes/{qrcode_id}', '',
            query, form,
            new Map<String, Object>{
                'qrcode_id' => (String) params.get('qrcodeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASQRCodeDetails.class
        );
    }
    /**
     * Retrieve a QR Code image
     * Get an image of a given QR code with a matching id and a format based on the Accept header.\nIf a base64 encoded value inside of JSON is preferred send Accept: application/json.\nIn addition to Accept: application/json the image format can be specified using the query parameter \&#39;format\&#39;.\nIf no format is specified anywhere the default will be SVG.\n
     * @param qrcodeId The QR Code ID (required)
     * @param accept The file format for the QR code\&#39;s image. If the accept header is application/json the image data will be wrapped in a json object. (optional)
     * @param format The format type of the image. If there is an image format in the header it takes precedence. (optional, default to svg)
     * @return OASPublicQRCodeImageResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPublicQRCodeImageResponse getQRCodeImagePublic(Map<String, Object> params) {
        client.assertNotNull(params.get('qrcodeId'), 'qrcodeId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('format', (String) params.get('format')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPublicQRCodeImageResponse) client.invoke(
            'GET', '/qr-codes/{qrcode_id}/image', '',
            query, form,
            new Map<String, Object>{
                'qrcode_id' => (String) params.get('qrcodeId')
            },
            new Map<String, Object>{
                'Accept' => (String) params.get('accept')
            },
            new List<String>{ 'application/json', 'image/svg+xml' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASPublicQRCodeImageResponse.class
        );
    }
    /**
     * Get Scans for a QR Code
     * Returns an array of scan counts for the specified QR code. The array is comprised of scan counts for each time window, where the window is based on the provided unit.
     * @param qrcodeId The QR Code ID (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASBitlinkScans
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBitlinkScans getScanMetricsForQRCode(Map<String, Object> params) {
        client.assertNotNull(params.get('qrcodeId'), 'qrcodeId');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBitlinkScans) client.invoke(
            'GET', '/qr-codes/{qrcode_id}/scans', '',
            query, form,
            new Map<String, Object>{
                'qrcode_id' => (String) params.get('qrcodeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASBitlinkScans.class
        );
    }
    /**
     * Get Scans for a QR Code by Browser
     * Returns the browsers generating scan traffic to the specified QR Code.
     * @param qrcodeId The QR Code ID (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASScanMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASScanMetrics getScanMetricsForQRCodeByBrowser(Map<String, Object> params) {
        client.assertNotNull(params.get('qrcodeId'), 'qrcodeId');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASScanMetrics) client.invoke(
            'GET', '/qr-codes/{qrcode_id}/scans/browsers', '',
            query, form,
            new Map<String, Object>{
                'qrcode_id' => (String) params.get('qrcodeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASScanMetrics.class
        );
    }
    /**
     * Get Metrics for a QR Code by City
     * Returns the city origins of scan traffic for the specified QR Code.
     * @param qrcodeId The QR Code ID (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASCityScanMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCityScanMetrics getScanMetricsForQRCodeByCities(Map<String, Object> params) {
        client.assertNotNull(params.get('qrcodeId'), 'qrcodeId');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASCityScanMetrics) client.invoke(
            'GET', '/qr-codes/{qrcode_id}/scans/cities', '',
            query, form,
            new Map<String, Object>{
                'qrcode_id' => (String) params.get('qrcodeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASCityScanMetrics.class
        );
    }
    /**
     * Get Scans for a QR Code by Country
     * Returns the country origins of scan traffic for the specified QR Code.
     * @param qrcodeId The QR Code ID (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASScanMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASScanMetrics getScanMetricsForQRCodeByCountries(Map<String, Object> params) {
        client.assertNotNull(params.get('qrcodeId'), 'qrcodeId');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASScanMetrics) client.invoke(
            'GET', '/qr-codes/{qrcode_id}/scans/countries', '',
            query, form,
            new Map<String, Object>{
                'qrcode_id' => (String) params.get('qrcodeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASScanMetrics.class
        );
    }
    /**
     * Get Scans for a QR Code by Device OS
     * Returns the device os generating scan traffic for the specified QR Code.
     * @param qrcodeId The QR Code ID (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASScanMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASScanMetrics getScanMetricsForQRCodeByDevicesOS(Map<String, Object> params) {
        client.assertNotNull(params.get('qrcodeId'), 'qrcodeId');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASScanMetrics) client.invoke(
            'GET', '/qr-codes/{qrcode_id}/scans/device_os', '',
            query, form,
            new Map<String, Object>{
                'qrcode_id' => (String) params.get('qrcodeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/csv' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASScanMetrics.class
        );
    }
    /**
     * Get Scans Summary for a QR Code
     * Returns the scan counts for a QR Code rolled up into a single field for a specified time window, where the window is based on the provided unit.
     * @param qrcodeId The QR Code ID (required)
     * @param unit A unit of time (required)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time (required)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace \&#39;+\&#39; with \&#39;%2B\&#39; and \&#39;:\&#39; with \&#39;%3A\&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return OASBitlinkScansSummary
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBitlinkScansSummary getScanMetricsSummaryForQRCode(Map<String, Object> params) {
        client.assertNotNull(params.get('qrcodeId'), 'qrcodeId');
        client.assertNotNull(params.get('unit'), 'unit');
        client.assertNotNull(params.get('units'), 'units');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('unit', (OASTimeUnit) params.get('unit')));
        query.addAll(client.makeParam('units', (Integer) params.get('units')));
        query.addAll(client.makeParam('unit_reference', (String) params.get('unitReference')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBitlinkScansSummary) client.invoke(
            'GET', '/qr-codes/{qrcode_id}/scans/summary', '',
            query, form,
            new Map<String, Object>{
                'qrcode_id' => (String) params.get('qrcodeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASBitlinkScansSummary.class
        );
    }
    /**
     * Retrieve QR Codes by Group
     * Retrieves a list of QR codes matching the filter settings. Values are in reverse chronological order.\nThe pagination occurs by calling the next link in the pagination response object.\n
     * @param hasRenderCustomizations a filter value if the QRCode has any render customizations (like color or shape changes) (optional, default to both)
     * @param archived a filter value if resource is archived or hidden (optional, default to off)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param searchAfter Token used to search next batch of qr codes, only use response from API as input value. (optional)
     * @return OASQRCodesMinimal
     * @throws OAS.ApiException if fails to make API call
     */
    public OASQRCodesMinimal listQRMinimal(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('has_render_customizations', (String) params.get('hasRenderCustomizations')));
        query.addAll(client.makeParam('archived', (String) params.get('archived')));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));
        query.addAll(client.makeParam('search_after', (String) params.get('searchAfter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASQRCodesMinimal) client.invoke(
            'GET', '/groups/{group_guid}/qr-codes', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASQRCodesMinimal.class
        );
    }
    /**
     * Update a QR Code
     * Updates the QR code with a matching id and returns it.
     * @param qrcodeId The QR code ID (required)
     * @param oaSPublicUpdateQRCodeRequest  (required)
     * @return OASQRCodeMinimal
     * @throws OAS.ApiException if fails to make API call
     */
    public OASQRCodeMinimal updateQRCodePublic(Map<String, Object> params) {
        client.assertNotNull(params.get('qrcodeId'), 'qrcodeId');
        client.assertNotNull(params.get('oaSPublicUpdateQRCodeRequest'), 'oaSPublicUpdateQRCodeRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASQRCodeMinimal) client.invoke(
            'PATCH', '/qr-codes/{qrcode_id}',
            (OASPublicUpdateQRCodeRequest) params.get('oaSPublicUpdateQRCodeRequest'),
            query, form,
            new Map<String, Object>{
                'qrcode_id' => (String) params.get('qrcodeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASQRCodeMinimal.class
        );
    }
}