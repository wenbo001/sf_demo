/*
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Represents one corner, both inner and outer, of a QR code, with color and shape values
 */
public class OASQRCodeCorner implements OAS.MappedProperties {
    /**
     * The inner color of a corner of the QR code in hex code format
     * @return innerColor
     */
    public String innerColor { get; set; }

    /**
     * The outer color of a corner of the QR code in hex code format
     * @return outerColor
     */
    public String outerColor { get; set; }

    /**
     * The shape one of the QR code\'s corners should take
     */
    public enum ShapeEnum {
        STANDARD,
        SLIGHTLY_ROUND,
        ROUNDED,
        EXTRA_ROUND,
        LEAF,
        LEAF_INNER,
        LEAF_OUTER,
        TARGET,
        CONCAVE
    }

    /**
     * The shape one of the QR code\'s corners should take
     * @return shape
     */
    public ShapeEnum shape { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'inner_color' => 'innerColor',
        'outer_color' => 'outerColor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
   }


    public OASQRCodeCorner() {
        shape = ShapeEnum.STANDARD;
    }

    public static OASQRCodeCorner getExample() {
        OASQRCodeCorner qrCodeCorner = new OASQRCodeCorner();
          qrCodeCorner.innerColor = '';
          qrCodeCorner.outerColor = '';
          qrCodeCorner.shape = ShapeEnum.STANDARD;
        return qrCodeCorner;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASQRCodeCorner) {           
            OASQRCodeCorner qrCodeCorner = (OASQRCodeCorner) obj;
            return this.innerColor == qrCodeCorner.innerColor
                && this.outerColor == qrCodeCorner.outerColor
                && this.shape == qrCodeCorner.shape;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (innerColor == null ? 0 : System.hashCode(innerColor));
        hashCode = (17 * hashCode) + (outerColor == null ? 0 : System.hashCode(outerColor));
        hashCode = (17 * hashCode) + (shape == null ? 0 : System.hashCode(shape));
        return hashCode;
    }
}