/*
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASDomainDNS
 */
public class OASDomainDNS implements OAS.MappedProperties {
    /**
     * the requested domain
     * @return domain
     */
    public String domain { get; set; }

    /**
     * the detected DNS provider for the requested domain
     */
    public enum DnsProviderEnum {
        UNKNOWN,
        GODADDY,
        CLOUDFLARE,
        NAMECHEAP,
        UNKNOWN_NAMECHEAP_GODADDY
    }

    /**
     * the detected DNS provider for the requested domain
     * @return dnsProvider
     */
    public DnsProviderEnum dnsProvider { get; set; }

    /**
     * the type of DNS record returned
     */
    public enum TypeEnum {
        A,
        CNAME,
        UNKNOWN
    }

    /**
     * the type of DNS record returned
     * @return type
     */
    public TypeEnum type { get; set; }

    /**
     * the records returned by the lookup
     * @return records
     */
    public List<String> records { get; set; }

    /**
     * whether the returned records represent a valid configuration
     * @return recordsValid
     */
    public Boolean recordsValid { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'dns_provider' => 'dnsProvider',
        'records_valid' => 'recordsValid'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
   }



    public OASDomainDNS() {
        records = new List<String>();
    }

    public static OASDomainDNS getExample() {
        OASDomainDNS domainDNS = new OASDomainDNS();
          domainDNS.domain = '';
          domainDNS.dnsProvider = DnsProviderEnum.UNKNOWN_NAMECHEAP_GODADDY;
          domainDNS.type = TypeEnum.A;
          domainDNS.records = new List<String>{''};
          domainDNS.recordsValid = true;
        return domainDNS;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASDomainDNS) {           
            OASDomainDNS domainDNS = (OASDomainDNS) obj;
            return this.domain == domainDNS.domain
                && this.dnsProvider == domainDNS.dnsProvider
                && this.type == domainDNS.type
                && this.records == domainDNS.records
                && this.recordsValid == domainDNS.recordsValid;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (domain == null ? 0 : System.hashCode(domain));
        hashCode = (17 * hashCode) + (dnsProvider == null ? 0 : System.hashCode(dnsProvider));
        hashCode = (17 * hashCode) + (type == null ? 0 : System.hashCode(type));
        hashCode = (17 * hashCode) + (records == null ? 0 : System.hashCode(records));
        hashCode = (17 * hashCode) + (recordsValid == null ? 0 : System.hashCode(recordsValid));
        return hashCode;
    }
}