/*
 * Bitly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASShortenBitlinkBodyAllOf
 */
public class OASShortenBitlinkBodyAllOf implements OAS.MappedProperties {
    /**
     * Get link
     * @return link
     */
    public String link { get; set; }

    /**
     * Get id
     * @return id
     */
    public String id { get; set; }

    /**
     * Get longUrl
     * @return longUrl
     */
    public String longUrl { get; set; }

    /**
     * Get archived
     * @return archived
     */
    public Boolean archived { get; set; }

    /**
     * Get createdAt
     * @return createdAt
     */
    public String createdAt { get; set; }

    /**
     * list of previously edited backhalfs for the bitlink - these are in reverse chronological order, with the most recently edited backhalf first
     * @return customBitlinks
     */
    public List<String> customBitlinks { get; set; }

    /**
     * Get tags
     * @return tags
     */
    public List<String> tags { get; set; }

    /**
     * Get deeplinks
     * @return deeplinks
     */
    public List<OASDeeplinkRule> deeplinks { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'long_url' => 'longUrl',
        'created_at' => 'createdAt',
        'custom_bitlinks' => 'customBitlinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
   }


    public OASShortenBitlinkBodyAllOf() {
        customBitlinks = new List<String>();
        tags = new List<String>();
        deeplinks = new List<OASDeeplinkRule>();
    }

    public static OASShortenBitlinkBodyAllOf getExample() {
        OASShortenBitlinkBodyAllOf shortenBitlinkBodyAllOf = new OASShortenBitlinkBodyAllOf();
          shortenBitlinkBodyAllOf.link = '';
          shortenBitlinkBodyAllOf.id = '';
          shortenBitlinkBodyAllOf.longUrl = '';
          shortenBitlinkBodyAllOf.archived = true;
          shortenBitlinkBodyAllOf.createdAt = '';
          shortenBitlinkBodyAllOf.customBitlinks = new List<String>{''};
          shortenBitlinkBodyAllOf.tags = new List<String>{''};
          shortenBitlinkBodyAllOf.deeplinks = new List<OASDeeplinkRule>{OASDeeplinkRule.getExample()};
        return shortenBitlinkBodyAllOf;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASShortenBitlinkBodyAllOf) {           
            OASShortenBitlinkBodyAllOf shortenBitlinkBodyAllOf = (OASShortenBitlinkBodyAllOf) obj;
            return this.link == shortenBitlinkBodyAllOf.link
                && this.id == shortenBitlinkBodyAllOf.id
                && this.longUrl == shortenBitlinkBodyAllOf.longUrl
                && this.archived == shortenBitlinkBodyAllOf.archived
                && this.createdAt == shortenBitlinkBodyAllOf.createdAt
                && this.customBitlinks == shortenBitlinkBodyAllOf.customBitlinks
                && this.tags == shortenBitlinkBodyAllOf.tags
                && this.deeplinks == shortenBitlinkBodyAllOf.deeplinks;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (link == null ? 0 : System.hashCode(link));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (longUrl == null ? 0 : System.hashCode(longUrl));
        hashCode = (17 * hashCode) + (archived == null ? 0 : System.hashCode(archived));
        hashCode = (17 * hashCode) + (createdAt == null ? 0 : System.hashCode(createdAt));
        hashCode = (17 * hashCode) + (customBitlinks == null ? 0 : System.hashCode(customBitlinks));
        hashCode = (17 * hashCode) + (tags == null ? 0 : System.hashCode(tags));
        hashCode = (17 * hashCode) + (deeplinks == null ? 0 : System.hashCode(deeplinks));
        return hashCode;
    }
}